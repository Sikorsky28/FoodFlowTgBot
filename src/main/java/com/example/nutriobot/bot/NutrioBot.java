package com.example.nutriobot.bot;

import com.example.nutriobot.configuration.Config;
import com.example.nutriobot.model.UserInput;
import com.example.nutriobot.service.PromptBuilder;
import org.json.JSONArray;
import org.json.JSONObject;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

public class NutrioBot extends TelegramLongPollingBot {

    private final Config config = new Config();

    @Override
    public String getBotUsername() {
        return config.getBotUsername();
    }

    @Override
    public String getBotToken() {
        return config.getBotToken();
    }

    public String getAiApiKey() {
        return config.getOpenrouterApiKey();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText().trim();
            System.out.println("üîî Update –ø–æ–ª—É—á–µ–Ω: " + update);

            switch (text) {
                case "/start":
                    sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø Food Flow Bot. –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /generateplan.");
                    break;
                case "/generateplan":
                    sendMessage(chatId, "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n" +
                            "<–≤–æ–∑—Ä–∞—Å—Ç> <–≤–µ—Å> <—Ä–æ—Å—Ç> <–ø–æ–ª> <–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è)> <–ª–æ–∫–∞—Ü–∏—è> <–±—é–¥–∂–µ—Ç> <—Ü–µ–ª—å>\n\n" +
                            "–ü—Ä–∏–º–µ—Ä:\n30 75 180 –º—É–∂—Å–∫–æ–π —Å—Ä–µ–¥–Ω—è—è –ú–æ—Å–∫–≤–∞ 500 –ø–æ—Ö—É–¥–µ–Ω–∏–µ");
                    break;
                default:
                    handleGeneratePlan(text, chatId);
                    break;
            }
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleGeneratePlan(String text, long chatId) {
        String[] parts = text.split("\\s+");

        if (parts.length < 8) {
            sendMessage(chatId, "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n<–≤–æ–∑—Ä–∞—Å—Ç> <–≤–µ—Å> <—Ä–æ—Å—Ç> <–ø–æ–ª> <–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å> <–ª–æ–∫–∞—Ü–∏—è> <–±—é–¥–∂–µ—Ç> <—Ü–µ–ª—å>");
            return;
        }

        try {
            int age = Integer.parseInt(parts[0]);
            int weight = Integer.parseInt(parts[1]);
            int height = Integer.parseInt(parts[2]);
            String gender = parts[3];
            String activity = parts[4];
            String location = parts[5];
            double budget = Double.parseDouble(parts[6]);
            String goal = parts[7];

            // –°–∫–ª–µ–∏–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –≤ –Ω–µ–π –±–æ–ª–µ–µ 1 —Å–ª–æ–≤–∞
            if (parts.length > 8) {
                StringBuilder locBuilder = new StringBuilder(parts[5]);
                for (int i = 6; i < parts.length - 2; i++) {
                    locBuilder.append(" ").append(parts[i]);
                }
                location = locBuilder.toString().trim();
                budget = Double.parseDouble(parts[parts.length - 2]);
                goal = parts[parts.length - 1];
            }

            UserInput input = new UserInput(age, weight, gender, height, activity, location, budget, goal);
            String prompt = PromptBuilder.build(input);

            sendMessage(chatId, "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è...");

            String aiResponse = getDeepSeekResponse(prompt);
            sendMessage(chatId, "ü§ñ AI –æ—Ç–≤–µ—Ç:\n" + aiResponse);

            System.out.printf("age=%d, weight=%d, height=%d, gender=%s, activity=%s, location=%s, budget=%.2f, goal=%s\n",
                    age, weight, height, gender, activity, location, budget, goal);

        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–≤–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å, —Ä–æ—Å—Ç, –±—é–¥–∂–µ—Ç).");
        } catch (Exception e) {
            sendMessage(chatId, "‚ùó –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private String getDeepSeekResponse(String userMessage) {
        try {
            HttpClient client = HttpClient.newHttpClient();
            String apiKey = config.getOpenrouterApiKey();

            JSONArray messages = new JSONArray();

            // üîí –ñ–µ—Å—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏–ª —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
            messages.put(new JSONObject()
                    .put("role", "system")
                    .put("content", "–¢—ã ‚Äî –¥–∏–µ—Ç–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤—å —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 1 –¥–µ–Ω—å (–∑–∞–≤—Ç—Ä–∞–∫, –ø–µ—Ä–µ–∫—É—Å, –æ–±–µ–¥, —É–∂–∏–Ω) –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. –ë–µ–∑ —Ñ–æ—Ä–º—É–ª, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –¢–æ–ª—å–∫–æ —Ä–∞—Ü–∏–æ–Ω –∏ —Å–ø–∏—Å–æ–∫."));

            // üß† –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.put(new JSONObject()
                    .put("role", "user")
                    .put("content", userMessage));

            JSONObject body = new JSONObject();
            body.put("model", "deepseek/deepseek-r1-0528-qwen3-8b:free");
            body.put("messages", messages);
            body.put("max_tokens", 1000);  // ‚¨ÖÔ∏è –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 300 –¥–æ 1000

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("https://openrouter.ai/api/v1/chat/completions"))
                    .header("Authorization", "Bearer " + apiKey)
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(body.toString()))
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() != 200) {
                return "‚ö†Ô∏è –û—à–∏–±–∫–∞: " + response.statusCode() + "\n" + response.body();
            }

            JSONObject jsonObject = new JSONObject(response.body());
            JSONObject choice = jsonObject.getJSONArray("choices").getJSONObject(0);
            JSONObject messageObj = choice.getJSONObject("message");

            String content = messageObj.optString("content", "").trim();

            if (content.isEmpty()) {
                return "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç.";
            }

            System.out.println("üß™ RAW RESPONSE:\n" + response.body());

            return content;

        } catch (Exception e) {
            e.printStackTrace();
            return "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek.";
        }
    }
}
